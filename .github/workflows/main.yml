name: Disassemble VMS -> .s

on:
  workflow_dispatch: {}
  push:
    paths:
      - '**/*.vms'

jobs:
  disassemble:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install Rust toolchain (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Clone waterbear (assembler/disassembler)
        run: |
          git clone https://github.com/wtetzner/waterbear.git /tmp/waterbear
          ls -la /tmp/waterbear

      - name: Build waterbear
        run: |
          cd /tmp/waterbear
          rustup target add x86_64-unknown-linux-gnu || true
          cargo build --release
          /tmp/waterbear/target/release/waterbear --version

      - name: Disassemble all .vms -> .s
        run: |
          WB=/tmp/waterbear/target/release/waterbear
          if [ ! -x "$WB" ]; then
            echo "ERROR: waterbear not found at $WB"
            exit 1
          fi
          set -euo pipefail
          found=0
          # find all .vms files (excluding .github folder)
          while IFS= read -r -d '' vmsfile; do
            found=1
            sfile="${vmsfile%.vms}.s"
            echo "Disassembling: $vmsfile -> $sfile"
            mkdir -p "$(dirname "$sfile")"
            # try both long and short flag variants just in case
            if ! "$WB" disassemble "$vmsfile" --output "$sfile"; then
              "$WB" disassemble "$vmsfile" -o "$sfile"
            fi
          done < <(find . -type f -name '*.vms' -not -path './.github/*' -print0)

          if [ "$found" -eq 0 ]; then
            echo "No .vms files found â€” nothing to do."
          fi

      - name: Commit & push generated .s files (if any)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Add only .s files (and updated .s files)
          git add -A '*.s' || true
          # If there are staged changes, commit and push
          if git diff --cached --quiet; then
            echo "No .s changes to commit."
          else
            git commit -m "[auto] Add/Update disassembled .s files (generated by workflow)"
            # Push back to the current branch
            BRANCH="${GITHUB_REF##*/}"
            echo "Pushing changes to branch: $BRANCH"
            git push origin HEAD:"$BRANCH"
          fi
